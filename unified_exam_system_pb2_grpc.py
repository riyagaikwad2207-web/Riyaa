# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import unified_exam_system_pb2 as unified__exam__system__pb2


class ExamServiceStub(object):
    """Main Exam Service - handles student interactions and exam flow
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartExam = channel.unary_unary(
                '/exam_system.ExamService/StartExam',
                request_serializer=unified__exam__system__pb2.StartExamRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.StartExamResponse.FromString,
                )
        self.GetExamQuestions = channel.unary_unary(
                '/exam_system.ExamService/GetExamQuestions',
                request_serializer=unified__exam__system__pb2.GetExamQuestionsRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.GetExamQuestionsResponse.FromString,
                )
        self.SubmitExam = channel.unary_unary(
                '/exam_system.ExamService/SubmitExam',
                request_serializer=unified__exam__system__pb2.SubmitExamRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.SubmitExamResponse.FromString,
                )
        self.GetStudentStatus = channel.unary_unary(
                '/exam_system.ExamService/GetStudentStatus',
                request_serializer=unified__exam__system__pb2.GetStudentStatusRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.GetStudentStatusResponse.FromString,
                )


class ExamServiceServicer(object):
    """Main Exam Service - handles student interactions and exam flow
    """

    def StartExam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExamQuestions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubmitExam(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStudentStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExamServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartExam': grpc.unary_unary_rpc_method_handler(
                    servicer.StartExam,
                    request_deserializer=unified__exam__system__pb2.StartExamRequest.FromString,
                    response_serializer=unified__exam__system__pb2.StartExamResponse.SerializeToString,
            ),
            'GetExamQuestions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExamQuestions,
                    request_deserializer=unified__exam__system__pb2.GetExamQuestionsRequest.FromString,
                    response_serializer=unified__exam__system__pb2.GetExamQuestionsResponse.SerializeToString,
            ),
            'SubmitExam': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitExam,
                    request_deserializer=unified__exam__system__pb2.SubmitExamRequest.FromString,
                    response_serializer=unified__exam__system__pb2.SubmitExamResponse.SerializeToString,
            ),
            'GetStudentStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStudentStatus,
                    request_deserializer=unified__exam__system__pb2.GetStudentStatusRequest.FromString,
                    response_serializer=unified__exam__system__pb2.GetStudentStatusResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'exam_system.ExamService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExamService(object):
    """Main Exam Service - handles student interactions and exam flow
    """

    @staticmethod
    def StartExam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.ExamService/StartExam',
            unified__exam__system__pb2.StartExamRequest.SerializeToString,
            unified__exam__system__pb2.StartExamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExamQuestions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.ExamService/GetExamQuestions',
            unified__exam__system__pb2.GetExamQuestionsRequest.SerializeToString,
            unified__exam__system__pb2.GetExamQuestionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubmitExam(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.ExamService/SubmitExam',
            unified__exam__system__pb2.SubmitExamRequest.SerializeToString,
            unified__exam__system__pb2.SubmitExamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStudentStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.ExamService/GetStudentStatus',
            unified__exam__system__pb2.GetStudentStatusRequest.SerializeToString,
            unified__exam__system__pb2.GetStudentStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TeacherServiceStub(object):
    """Teacher Service - handles teacher operations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartExamSession = channel.unary_unary(
                '/exam_system.TeacherService/StartExamSession',
                request_serializer=unified__exam__system__pb2.StartExamSessionRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.StartExamSessionResponse.FromString,
                )
        self.EndExamSession = channel.unary_unary(
                '/exam_system.TeacherService/EndExamSession',
                request_serializer=unified__exam__system__pb2.EndExamSessionRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.EndExamSessionResponse.FromString,
                )
        self.GetAllStudentMarks = channel.unary_unary(
                '/exam_system.TeacherService/GetAllStudentMarks',
                request_serializer=unified__exam__system__pb2.GetAllStudentMarksRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.GetAllStudentMarksResponse.FromString,
                )
        self.UpdateStudentMarks = channel.unary_unary(
                '/exam_system.TeacherService/UpdateStudentMarks',
                request_serializer=unified__exam__system__pb2.UpdateStudentMarksRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.UpdateStudentMarksResponse.FromString,
                )
        self.GetExamResults = channel.unary_unary(
                '/exam_system.TeacherService/GetExamResults',
                request_serializer=unified__exam__system__pb2.GetExamResultsRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.GetExamResultsResponse.FromString,
                )


class TeacherServiceServicer(object):
    """Teacher Service - handles teacher operations
    """

    def StartExamSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndExamSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllStudentMarks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateStudentMarks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExamResults(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TeacherServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartExamSession': grpc.unary_unary_rpc_method_handler(
                    servicer.StartExamSession,
                    request_deserializer=unified__exam__system__pb2.StartExamSessionRequest.FromString,
                    response_serializer=unified__exam__system__pb2.StartExamSessionResponse.SerializeToString,
            ),
            'EndExamSession': grpc.unary_unary_rpc_method_handler(
                    servicer.EndExamSession,
                    request_deserializer=unified__exam__system__pb2.EndExamSessionRequest.FromString,
                    response_serializer=unified__exam__system__pb2.EndExamSessionResponse.SerializeToString,
            ),
            'GetAllStudentMarks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllStudentMarks,
                    request_deserializer=unified__exam__system__pb2.GetAllStudentMarksRequest.FromString,
                    response_serializer=unified__exam__system__pb2.GetAllStudentMarksResponse.SerializeToString,
            ),
            'UpdateStudentMarks': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateStudentMarks,
                    request_deserializer=unified__exam__system__pb2.UpdateStudentMarksRequest.FromString,
                    response_serializer=unified__exam__system__pb2.UpdateStudentMarksResponse.SerializeToString,
            ),
            'GetExamResults': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExamResults,
                    request_deserializer=unified__exam__system__pb2.GetExamResultsRequest.FromString,
                    response_serializer=unified__exam__system__pb2.GetExamResultsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'exam_system.TeacherService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TeacherService(object):
    """Teacher Service - handles teacher operations
    """

    @staticmethod
    def StartExamSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.TeacherService/StartExamSession',
            unified__exam__system__pb2.StartExamSessionRequest.SerializeToString,
            unified__exam__system__pb2.StartExamSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EndExamSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.TeacherService/EndExamSession',
            unified__exam__system__pb2.EndExamSessionRequest.SerializeToString,
            unified__exam__system__pb2.EndExamSessionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllStudentMarks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.TeacherService/GetAllStudentMarks',
            unified__exam__system__pb2.GetAllStudentMarksRequest.SerializeToString,
            unified__exam__system__pb2.GetAllStudentMarksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateStudentMarks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.TeacherService/UpdateStudentMarks',
            unified__exam__system__pb2.UpdateStudentMarksRequest.SerializeToString,
            unified__exam__system__pb2.UpdateStudentMarksResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExamResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.TeacherService/GetExamResults',
            unified__exam__system__pb2.GetExamResultsRequest.SerializeToString,
            unified__exam__system__pb2.GetExamResultsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LoadBalancerServiceStub(object):
    """Load Balancer Service - handles request distribution and failover
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RouteSubmission = channel.unary_unary(
                '/exam_system.LoadBalancerService/RouteSubmission',
                request_serializer=unified__exam__system__pb2.RouteSubmissionRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.RouteSubmissionResponse.FromString,
                )
        self.GetServerStatus = channel.unary_unary(
                '/exam_system.LoadBalancerService/GetServerStatus',
                request_serializer=unified__exam__system__pb2.GetServerStatusRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.GetServerStatusResponse.FromString,
                )
        self.MigrateRequests = channel.unary_unary(
                '/exam_system.LoadBalancerService/MigrateRequests',
                request_serializer=unified__exam__system__pb2.MigrateRequestsRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.MigrateRequestsResponse.FromString,
                )


class LoadBalancerServiceServicer(object):
    """Load Balancer Service - handles request distribution and failover
    """

    def RouteSubmission(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServerStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MigrateRequests(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LoadBalancerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RouteSubmission': grpc.unary_unary_rpc_method_handler(
                    servicer.RouteSubmission,
                    request_deserializer=unified__exam__system__pb2.RouteSubmissionRequest.FromString,
                    response_serializer=unified__exam__system__pb2.RouteSubmissionResponse.SerializeToString,
            ),
            'GetServerStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerStatus,
                    request_deserializer=unified__exam__system__pb2.GetServerStatusRequest.FromString,
                    response_serializer=unified__exam__system__pb2.GetServerStatusResponse.SerializeToString,
            ),
            'MigrateRequests': grpc.unary_unary_rpc_method_handler(
                    servicer.MigrateRequests,
                    request_deserializer=unified__exam__system__pb2.MigrateRequestsRequest.FromString,
                    response_serializer=unified__exam__system__pb2.MigrateRequestsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'exam_system.LoadBalancerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LoadBalancerService(object):
    """Load Balancer Service - handles request distribution and failover
    """

    @staticmethod
    def RouteSubmission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.LoadBalancerService/RouteSubmission',
            unified__exam__system__pb2.RouteSubmissionRequest.SerializeToString,
            unified__exam__system__pb2.RouteSubmissionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServerStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.LoadBalancerService/GetServerStatus',
            unified__exam__system__pb2.GetServerStatusRequest.SerializeToString,
            unified__exam__system__pb2.GetServerStatusResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MigrateRequests(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.LoadBalancerService/MigrateRequests',
            unified__exam__system__pb2.MigrateRequestsRequest.SerializeToString,
            unified__exam__system__pb2.MigrateRequestsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class BackupServiceStub(object):
    """Backup Server Service - processes requests when main server is overloaded
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessSubmission = channel.unary_unary(
                '/exam_system.BackupService/ProcessSubmission',
                request_serializer=unified__exam__system__pb2.ProcessSubmissionRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.SubmitExamResponse.FromString,
                )
        self.HealthCheck = channel.unary_unary(
                '/exam_system.BackupService/HealthCheck',
                request_serializer=unified__exam__system__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.HealthCheckResponse.FromString,
                )


class BackupServiceServicer(object):
    """Backup Server Service - processes requests when main server is overloaded
    """

    def ProcessSubmission(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HealthCheck(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BackupServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessSubmission': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessSubmission,
                    request_deserializer=unified__exam__system__pb2.ProcessSubmissionRequest.FromString,
                    response_serializer=unified__exam__system__pb2.SubmitExamResponse.SerializeToString,
            ),
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=unified__exam__system__pb2.HealthCheckRequest.FromString,
                    response_serializer=unified__exam__system__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'exam_system.BackupService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BackupService(object):
    """Backup Server Service - processes requests when main server is overloaded
    """

    @staticmethod
    def ProcessSubmission(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.BackupService/ProcessSubmission',
            unified__exam__system__pb2.ProcessSubmissionRequest.SerializeToString,
            unified__exam__system__pb2.SubmitExamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.BackupService/HealthCheck',
            unified__exam__system__pb2.HealthCheckRequest.SerializeToString,
            unified__exam__system__pb2.HealthCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ConsistencyServiceStub(object):
    """Consistency Service - manages data consistency and replication
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadStudentData = channel.unary_unary(
                '/exam_system.ConsistencyService/ReadStudentData',
                request_serializer=unified__exam__system__pb2.ReadStudentDataRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.ReadStudentDataResponse.FromString,
                )
        self.WriteStudentData = channel.unary_unary(
                '/exam_system.ConsistencyService/WriteStudentData',
                request_serializer=unified__exam__system__pb2.WriteStudentDataRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.WriteStudentDataResponse.FromString,
                )
        self.BeginReadTransaction = channel.unary_unary(
                '/exam_system.ConsistencyService/BeginReadTransaction',
                request_serializer=unified__exam__system__pb2.BeginReadTransactionRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.BeginReadTransactionResponse.FromString,
                )
        self.EndReadTransaction = channel.unary_unary(
                '/exam_system.ConsistencyService/EndReadTransaction',
                request_serializer=unified__exam__system__pb2.EndReadTransactionRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.EndReadTransactionResponse.FromString,
                )
        self.BeginWriteTransaction = channel.unary_unary(
                '/exam_system.ConsistencyService/BeginWriteTransaction',
                request_serializer=unified__exam__system__pb2.BeginWriteTransactionRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.BeginWriteTransactionResponse.FromString,
                )
        self.EndWriteTransaction = channel.unary_unary(
                '/exam_system.ConsistencyService/EndWriteTransaction',
                request_serializer=unified__exam__system__pb2.EndWriteTransactionRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.EndWriteTransactionResponse.FromString,
                )
        self.GetAllStudentsData = channel.unary_unary(
                '/exam_system.ConsistencyService/GetAllStudentsData',
                request_serializer=unified__exam__system__pb2.GetAllStudentsDataRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.GetAllStudentsDataResponse.FromString,
                )


class ConsistencyServiceServicer(object):
    """Consistency Service - manages data consistency and replication
    """

    def ReadStudentData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteStudentData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BeginReadTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndReadTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BeginWriteTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EndWriteTransaction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllStudentsData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConsistencyServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadStudentData': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadStudentData,
                    request_deserializer=unified__exam__system__pb2.ReadStudentDataRequest.FromString,
                    response_serializer=unified__exam__system__pb2.ReadStudentDataResponse.SerializeToString,
            ),
            'WriteStudentData': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteStudentData,
                    request_deserializer=unified__exam__system__pb2.WriteStudentDataRequest.FromString,
                    response_serializer=unified__exam__system__pb2.WriteStudentDataResponse.SerializeToString,
            ),
            'BeginReadTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.BeginReadTransaction,
                    request_deserializer=unified__exam__system__pb2.BeginReadTransactionRequest.FromString,
                    response_serializer=unified__exam__system__pb2.BeginReadTransactionResponse.SerializeToString,
            ),
            'EndReadTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.EndReadTransaction,
                    request_deserializer=unified__exam__system__pb2.EndReadTransactionRequest.FromString,
                    response_serializer=unified__exam__system__pb2.EndReadTransactionResponse.SerializeToString,
            ),
            'BeginWriteTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.BeginWriteTransaction,
                    request_deserializer=unified__exam__system__pb2.BeginWriteTransactionRequest.FromString,
                    response_serializer=unified__exam__system__pb2.BeginWriteTransactionResponse.SerializeToString,
            ),
            'EndWriteTransaction': grpc.unary_unary_rpc_method_handler(
                    servicer.EndWriteTransaction,
                    request_deserializer=unified__exam__system__pb2.EndWriteTransactionRequest.FromString,
                    response_serializer=unified__exam__system__pb2.EndWriteTransactionResponse.SerializeToString,
            ),
            'GetAllStudentsData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllStudentsData,
                    request_deserializer=unified__exam__system__pb2.GetAllStudentsDataRequest.FromString,
                    response_serializer=unified__exam__system__pb2.GetAllStudentsDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'exam_system.ConsistencyService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ConsistencyService(object):
    """Consistency Service - manages data consistency and replication
    """

    @staticmethod
    def ReadStudentData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.ConsistencyService/ReadStudentData',
            unified__exam__system__pb2.ReadStudentDataRequest.SerializeToString,
            unified__exam__system__pb2.ReadStudentDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteStudentData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.ConsistencyService/WriteStudentData',
            unified__exam__system__pb2.WriteStudentDataRequest.SerializeToString,
            unified__exam__system__pb2.WriteStudentDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BeginReadTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.ConsistencyService/BeginReadTransaction',
            unified__exam__system__pb2.BeginReadTransactionRequest.SerializeToString,
            unified__exam__system__pb2.BeginReadTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EndReadTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.ConsistencyService/EndReadTransaction',
            unified__exam__system__pb2.EndReadTransactionRequest.SerializeToString,
            unified__exam__system__pb2.EndReadTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BeginWriteTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.ConsistencyService/BeginWriteTransaction',
            unified__exam__system__pb2.BeginWriteTransactionRequest.SerializeToString,
            unified__exam__system__pb2.BeginWriteTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def EndWriteTransaction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.ConsistencyService/EndWriteTransaction',
            unified__exam__system__pb2.EndWriteTransactionRequest.SerializeToString,
            unified__exam__system__pb2.EndWriteTransactionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAllStudentsData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.ConsistencyService/GetAllStudentsData',
            unified__exam__system__pb2.GetAllStudentsDataRequest.SerializeToString,
            unified__exam__system__pb2.GetAllStudentsDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RicartAgrawalaServiceStub(object):
    """Ricart-Agrawala Service - mutual exclusion (keeping existing)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RequestCS = channel.unary_unary(
                '/exam_system.RicartAgrawalaService/RequestCS',
                request_serializer=unified__exam__system__pb2.RequestCSRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.RequestCSResponse.FromString,
                )
        self.ReleaseCS = channel.unary_unary(
                '/exam_system.RicartAgrawalaService/ReleaseCS',
                request_serializer=unified__exam__system__pb2.ReleaseCSRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.ReleaseCSResponse.FromString,
                )


class RicartAgrawalaServiceServicer(object):
    """Ricart-Agrawala Service - mutual exclusion (keeping existing)
    """

    def RequestCS(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReleaseCS(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RicartAgrawalaServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RequestCS': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestCS,
                    request_deserializer=unified__exam__system__pb2.RequestCSRequest.FromString,
                    response_serializer=unified__exam__system__pb2.RequestCSResponse.SerializeToString,
            ),
            'ReleaseCS': grpc.unary_unary_rpc_method_handler(
                    servicer.ReleaseCS,
                    request_deserializer=unified__exam__system__pb2.ReleaseCSRequest.FromString,
                    response_serializer=unified__exam__system__pb2.ReleaseCSResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'exam_system.RicartAgrawalaService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RicartAgrawalaService(object):
    """Ricart-Agrawala Service - mutual exclusion (keeping existing)
    """

    @staticmethod
    def RequestCS(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.RicartAgrawalaService/RequestCS',
            unified__exam__system__pb2.RequestCSRequest.SerializeToString,
            unified__exam__system__pb2.RequestCSResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReleaseCS(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.RicartAgrawalaService/ReleaseCS',
            unified__exam__system__pb2.ReleaseCSRequest.SerializeToString,
            unified__exam__system__pb2.ReleaseCSResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TimeServiceStub(object):
    """Time Service - for synchronization (keeping existing)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetClock = channel.unary_unary(
                '/exam_system.TimeService/GetClock',
                request_serializer=unified__exam__system__pb2.GetClockRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.GetClockResponse.FromString,
                )
        self.SetClock = channel.unary_unary(
                '/exam_system.TimeService/SetClock',
                request_serializer=unified__exam__system__pb2.SetClockRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.SetClockResponse.FromString,
                )


class TimeServiceServicer(object):
    """Time Service - for synchronization (keeping existing)
    """

    def GetClock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetClock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TimeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetClock': grpc.unary_unary_rpc_method_handler(
                    servicer.GetClock,
                    request_deserializer=unified__exam__system__pb2.GetClockRequest.FromString,
                    response_serializer=unified__exam__system__pb2.GetClockResponse.SerializeToString,
            ),
            'SetClock': grpc.unary_unary_rpc_method_handler(
                    servicer.SetClock,
                    request_deserializer=unified__exam__system__pb2.SetClockRequest.FromString,
                    response_serializer=unified__exam__system__pb2.SetClockResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'exam_system.TimeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TimeService(object):
    """Time Service - for synchronization (keeping existing)
    """

    @staticmethod
    def GetClock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.TimeService/GetClock',
            unified__exam__system__pb2.GetClockRequest.SerializeToString,
            unified__exam__system__pb2.GetClockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetClock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.TimeService/SetClock',
            unified__exam__system__pb2.SetClockRequest.SerializeToString,
            unified__exam__system__pb2.SetClockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AdminServiceStub(object):
    """Admin Service - for monitoring and logging
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSystemLogs = channel.unary_unary(
                '/exam_system.AdminService/GetSystemLogs',
                request_serializer=unified__exam__system__pb2.GetSystemLogsRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.GetSystemLogsResponse.FromString,
                )
        self.GetServerMetrics = channel.unary_unary(
                '/exam_system.AdminService/GetServerMetrics',
                request_serializer=unified__exam__system__pb2.GetServerMetricsRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.GetServerMetricsResponse.FromString,
                )
        self.GetActiveConnections = channel.unary_unary(
                '/exam_system.AdminService/GetActiveConnections',
                request_serializer=unified__exam__system__pb2.GetActiveConnectionsRequest.SerializeToString,
                response_deserializer=unified__exam__system__pb2.GetActiveConnectionsResponse.FromString,
                )


class AdminServiceServicer(object):
    """Admin Service - for monitoring and logging
    """

    def GetSystemLogs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServerMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetActiveConnections(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AdminServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSystemLogs': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSystemLogs,
                    request_deserializer=unified__exam__system__pb2.GetSystemLogsRequest.FromString,
                    response_serializer=unified__exam__system__pb2.GetSystemLogsResponse.SerializeToString,
            ),
            'GetServerMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerMetrics,
                    request_deserializer=unified__exam__system__pb2.GetServerMetricsRequest.FromString,
                    response_serializer=unified__exam__system__pb2.GetServerMetricsResponse.SerializeToString,
            ),
            'GetActiveConnections': grpc.unary_unary_rpc_method_handler(
                    servicer.GetActiveConnections,
                    request_deserializer=unified__exam__system__pb2.GetActiveConnectionsRequest.FromString,
                    response_serializer=unified__exam__system__pb2.GetActiveConnectionsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'exam_system.AdminService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AdminService(object):
    """Admin Service - for monitoring and logging
    """

    @staticmethod
    def GetSystemLogs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.AdminService/GetSystemLogs',
            unified__exam__system__pb2.GetSystemLogsRequest.SerializeToString,
            unified__exam__system__pb2.GetSystemLogsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServerMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.AdminService/GetServerMetrics',
            unified__exam__system__pb2.GetServerMetricsRequest.SerializeToString,
            unified__exam__system__pb2.GetServerMetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetActiveConnections(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/exam_system.AdminService/GetActiveConnections',
            unified__exam__system__pb2.GetActiveConnectionsRequest.SerializeToString,
            unified__exam__system__pb2.GetActiveConnectionsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
